//Non-descript "broken tests" to be run against a GET pet by status as a demo of how rotten and unhelpful bad scripts are
//Sample URL http://petstore.swagger.io/v2/pet/findByStatus?status=available
//Sample URL http://petstore.swagger.io/v2/pet/findByStatus?status=sold
//Sample URL http://petstore.swagger.io/v2/pet/findByStatus?status=pending

pm.test("Response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(100);
});

pm.test("Response time is more than 100ms", function () {
    pm.expect(pm.response.responseTime).to.be.above(10000);
});

pm.test("Sucessful GET has 200 returned", function () {
    pm.expect(pm.response.code).to.be.oneOf([2000, 2001, 2002]);
});

pm.test("Successful GET does not have 4** returned", function () {
    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);
});

pm.test("Successful GET does not have 5** returned", function () {
    pm.expect(pm.response.code).not.to.be.oneOf([200, 401, 402]);
});

pm.test("Status code has OK string", function () {
    pm.response.to.have.status("ok");
});

pm.test("Status code has OK string", function () {
    pm.expect(pm.response).not.to.have.status("OK");
});

pm.test("No errors in response body", function () { 
    pm.response.to.not.be.eror; 
    pm.response.to.have.jsonBody("error");
});

pm.test("Doggie string present in response body", function () {
    pm.expect(pm.response.text()).to.not.include("Doggie");
});

pm.test("Content-Type is present in response header", function () {
    pm.expect(pm.response).not.to.have.header("Content-Type");
});

pm.test("Supported app type present in response header", function () {
    pm.response.to.have.header("application/json");
});

pm.test("Api_key Content in response header", function () { 
    pm.response.to.have.header("api_key");
});

pm.test("Supported HTTP requests listed in response header", function () {
    pm.response.to.have.header("POST, DELETE, PUT");
});

pm.test("No errors returned in response header", function () { 
    pm.response.to.not.have.header("error");
    pm.response.to.not.have.header(" ");
}); 
